name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  linter:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          activate-environment: chemsmart
      - name: Install project
        shell: bash -l {0}
        run: make install
      - name: Run linter
        shell: bash -l {0}
        run: make lint

  build:
    permissions:
      contents: read
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
#      - name: Generate a token
#        id: generate_token
#        uses: actions/create-github-app-token@v1
#        with:
#          app-id: ${{ secrets.AUTH_BOT_APP_ID }}
#          private-key: ${{ secrets.AUTH_BOT_APP_PRIVATE_KEY }}
      - name: Clear existing cache
        shell: bash -l {0}
        run: |
          rm -rf ~/.cache/pip
          rm -rf ./.gradle/caches/
          rm -rf ~/.m2/repository/
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          environment-file: environment.yml
          activate-environment: chemsmart
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 ruff black pytest pytest-cov
          pip install -e .
      - name: Lint with flake8
        shell: bash -l {0}
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          # we will use length 79 instead
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics
      - name: Lint with ruff
        shell: bash -l {0}
        run: |
          ruff check . --line-length=79 --ignore-noqa  --statistics
      - name: Format check with black
        shell: bash -l {0}
        run: |
          black --line-length 79 --check .
      - name: Test with pytest and calculate coverage
        shell: bash -l {0}
        run: |
          pytest --cov-report "xml:coverage.xml" --cov=. --cov-branch
          coverage combine || true  # Handle case where no prior data exists
      - name: Create Coverage
        if: ${{ github.event_name == 'pull_request' }}
        uses: orgoro/coverage@v3
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}

  tests_linux:
    needs: linter
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          activate-environment: chemsmart
      - name: Install project
        shell: bash -l {0}
        run: make install
      - name: Run tests
        shell: bash -l {0}
        run: make test
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v5
        # with:
        #   fail_ci_if_error: true

  tests_mac:
    needs: linter
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          activate-environment: chemsmart
      - name: Install project
        shell: bash -l {0}
        run: make install
      - name: Run tests
        shell: bash -l {0}
        run: make test

tests_win:
    # make does not work for windows
    needs: linter
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          activate-environment: chemsmart
          channels: conda-forge,defaults
      - name: Install Pip
        shell: cmd
        run: |
          call "%CONDA%\Scripts\activate.bat" chemsmart
          pip install --user pip
      - name: Upgrading Pip
        shell: cmd
        run: |
          call "%CONDA%\Scripts\activate.bat" chemsmart
          python -m pip install --upgrade pip
      - name: Install project
        shell: cmd
        run: |
          call "%CONDA%\Scripts\activate.bat" chemsmart
          pip install -e .[test]
      - name: Verify PyMOL Installation
        shell: cmd
        run: |
          call "%CONDA%\Scripts\activate.bat" chemsmart
          where pymol || echo "PyMOL not found in PATH"
          pymol -c || echo "PyMOL failed to run (expected if no GUI, checking availability)"
      - name: Debug Environment
        shell: cmd
        run: |
          call "%CONDA%\Scripts\activate.bat" chemsmart
          echo PATH=%PATH%
          conda list | findstr pymol
      - name: run tests
        shell: cmd
        run: |
          call "%CONDA%\Scripts\activate.bat" chemsmart
          pytest -s -vvvv -l --tb=long --cov=chemsmart --cov-branch tests/
